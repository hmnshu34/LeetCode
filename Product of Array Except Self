/*Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Solve it without division and in O(n).

For example, given [1,2,3,4], return [24,12,8,6].

Follow up:
Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)  */



public class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] l = new int[nums.length];
        int[] r =new int[nums.length];
        l[0]=1;
        r[nums.length-1]=1;
        for(int i=0;i<nums.length-1;i++){
            l[i+1]=l[i]*nums[i];
        }
        for(int i=nums.length-1;i>0;i--){
            r[i-1]=r[i]*nums[i];
        }
        int[] result =new int[nums.length];
        for(int i=0;i<nums.length;i++){
            result[i]=l[i]*r[i];
        }
        return result;
    }
}
