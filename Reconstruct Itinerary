/*Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with JFK.

Note:
If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary ["JFK", "LGA"] has a smaller lexical order than ["JFK", "LGB"].
All airports are represented by three capital letters (IATA code).
You may assume all tickets form at least one valid itinerary.
Example 1:
tickets = [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]
Return ["JFK", "MUC", "LHR", "SFO", "SJC"].
Example 2:
tickets = [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
Return ["JFK","ATL","JFK","SFO","ATL","SFO"].
Another possible reconstruction is ["JFK","SFO","ATL","JFK","ATL","SFO"]. But it is larger in lexical order.  */



public class Solution{
	HashMap<String,PriorityQueue<String>> hm = new HashMap<String,PriorityQueue<String>>();
	LinkedList<String> list = new LinkedList<String>();
 
	public List<String> findItinerary(String[][] tickets) {
	    for(String[] string :tickets){
	        if(!hm.containsKey(string[0])){
	            PriorityQueue<String> pq = new PriorityQueue<String>();
	            hm.put(string[0],pq);
	        }
	        hm.get(string[0]).offer(string[1]);
	    }
	    construct("JFK");
	    return list;
	
	}
	public void construct(String s ){
	    PriorityQueue<String> q = hm.get(s);
	    while(q!=null && !q.isEmpty()){
	        construct(q.poll());
	    }
	    list.addFirst(s);
	}
}
